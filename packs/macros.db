{"name":"Cover Debug Tester","type":"script","scope":"global","author":"nx29hoGineoQv9Bs","img":"icons/svg/mage-shield.svg","command":"// Macro to measure cover between selected tokens and targets\n// This version turns on debugging for the cover\n\n\n/**\n * Measure distance between two points.\n * @param {PIXI.Point|Point3d} a\n * @param {PIXI.Point|Point3d} b\n * @returns {number} Returns two dimensional distance for PIXI.Point, \n *   three dimensional distance for Point3d.\n */\nfunction distanceBetweenPoints(a, b) {\n  return b.subtract(a).magnitude();\n}\n\n/**\n * Convert pixels to grid units.\n * @param {number} pixels   Amount in pixels (canvas coordinates)\n * @returns {number}\n */\nfunction pixelsToGridUnits(pixels) {\n  const { distance, size } = canvas.scene.dimensions;\n  return (pixels * distance) / size;\n}\n\nconst tokens = [];\nconst targets = [];\n\ncanvas.tokens.placeables.forEach(t => {\n  t.isTargeted && targets.push(t);\n  t.controlled && tokens.push(t);\n})\n\nif ( !tokens.length ) {\n  ui.notifications.error(\"Please select at least one token.\");\n  return;\n}\n\n\n\n// if ( !targets.length ) {\n//   ui.notifications.error(\"Please target at least one token.\");\n//   return;\n// }\n\nconst api = game.modules.get(\"tokenvisibility\").api;\napi.debug.cover = true;\napi.debug.once = true; // Turn on debugging just for this macro; turns off at next token move.\n\nconst CoverCalculator = api.CoverCalculator;\nconst Point3d = api.Point3d;\n\nconst coverTable = CoverCalculator.htmlCoverTable(tokens, targets);\n\nconst cover_algorithm = game.settings.get(\"tokenvisibility\", \"cover-algorithm\");\nconst cover_algorithm_description = game.i18n.localize(`tokenvisibility.settings.${cover_algorithm}`);\n\nhtml_content = \n`\n${coverTable.html}\n<em>Cover algorithm: ${cover_algorithm_description}</em>\n<br>\n<br>\n`;\n\nconst d = new Dialog({\n  title: \"Cover by Target\",\n  content: html_content,\n  buttons: {\n    one: {\n      icon: '<i class=\"fas fa-times\"></i>',\n      label: \"Done\",\n    }\n  },\n  default: \"Done\" \n});\n\n\nd.render(true, { height: \"100%\" });","ownership":{"default":0,"nx29hoGineoQv9Bs":3},"flags":{"core":{"sourceId":"Macro.9NzYnAjgeeKxitK6"}},"_stats":{"systemId":"dnd5e","systemVersion":"2.0.3","coreVersion":"10.288","createdTime":1668630920917,"modifiedTime":1668631846969,"lastModifiedBy":"nx29hoGineoQv9Bs"},"folder":null,"sort":0,"_id":"AaVIqRzz6URaOuZ9"}
{"name":"Measure Cover","type":"script","author":"nx29hoGineoQv9Bs","img":"icons/svg/shield.svg","scope":"global","command":"// Macro to measure cover between selected tokens and targets\n\n/**\n * Measure distance between two points.\n * @param {PIXI.Point|Point3d} a\n * @param {PIXI.Point|Point3d} b\n * @returns {number} Returns two dimensional distance for PIXI.Point, \n *   three dimensional distance for Point3d.\n */\nfunction distanceBetweenPoints(a, b) {\n  return b.subtract(a).magnitude();\n}\n\n/**\n * Convert pixels to grid units.\n * @param {number} pixels   Amount in pixels (canvas coordinates)\n * @returns {number}\n */\nfunction pixelsToGridUnits(pixels) {\n  const { distance, size } = canvas.scene.dimensions;\n  return (pixels * distance) / size;\n}\n\nconst tokens = [];\nconst targets = [];\n\ncanvas.tokens.placeables.forEach(t => {\n  t.isTargeted && targets.push(t);\n  t.controlled && tokens.push(t);\n})\n\nif ( !tokens.length ) {\n  ui.notifications.error(\"Please select at least one token.\");\n  return;\n}\n\n// if ( !targets.length ) {\n//   ui.notifications.error(\"Please target at least one token.\");\n//   return;\n// }\n\nconst api = game.modules.get(\"tokenvisibility\").api;\nconst CoverCalculator = api.CoverCalculator;\nconst Point3d = api.Point3d;\n\nconst coverTable = CoverCalculator.htmlCoverTable(tokens, targets);\n\nconst cover_algorithm = game.settings.get(\"tokenvisibility\", \"cover-algorithm\");\nconst cover_algorithm_description = game.i18n.localize(`tokenvisibility.settings.${cover_algorithm}`);\n\nhtml_content = \n`\n${coverTable.html}\n<em>Cover algorithm: ${cover_algorithm_description}</em>\n<br>\n<br>\n`;\n\nconst d = new Dialog({\n  title: \"Cover by Target\",\n  content: html_content,\n  buttons: {\n    one: {\n      icon: '<i class=\"fas fa-times\"></i>',\n      label: \"Done\",\n    }\n  },\n  default: \"Done\" \n});\n\n\nd.render(true, { height: \"100%\" });","ownership":{"default":0,"nx29hoGineoQv9Bs":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.GQY2WoClTjxNjzay"}},"_stats":{"systemId":"dnd5e","systemVersion":"2.0.3","coreVersion":"10.288","createdTime":1666899726209,"modifiedTime":1667400718711,"lastModifiedBy":"nx29hoGineoQv9Bs"},"folder":null,"sort":0,"_id":"n2PNbpwTKLB6pxY7"}
